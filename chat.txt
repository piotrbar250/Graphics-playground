Line.cpp:
#pragma once
#include <SFML/Graphics.hpp>
#include "Point.cpp"
#include <chrono>
#include <thread>
using namespace std;
using namespace sf;

class Line
{
public:
    float A, B, C;
    bool isVertical;
    Point verticalVector;

    Line(const Point& p1, const Point& p2)
    {
        A = p1.y - p2.y;
        B = p2.x - p1.x;
        C = p1.x * (p2.y - p1.y) + (p1.x - p2.x) * p1.y; 
        isVertical = B == 0;
        verticalVector = Point(A, B).normalised();
    }

    float getY(float x) const
    {
        return (-A*x - C) / B;
    }

    Vertex* vertexesOnLine() const
    {
        Vertex* nodes = new Vertex[M];
        if(!isVertical)
        {
            for(int i = 0; i < M; i++)
            {
                nodes[i].position = Vector2f(i, getY(i));
            }
        }
        return nodes;
    }

    void draw() const
    {
        Vertex* nodes = vertexesOnLine();
        window.draw(nodes, M, sf::Lines);
    }

    float dis(const Point& p)
    {
        return fabs(A*p.x + B*p.y + C) / sqrt(A*A + B*B);
    }

    Line parallelLine(const Segment& segment, float offset)
    {
        return Line(segment.b + verticalVector*offset, segment.e + verticalVector*offset)
    }
};

Point.cpp:
#pragma once
#include <iostream>
#include <SFML/Graphics.hpp>
#include <cmath>
#include "global.hpp"
using namespace std;
using namespace sf;


class Point
{
public:
    float x, y;
    Point(){}
    // Point(float x, float y) : x(x), y(y) {}
    Point(float x, float y)
    {
        this->x = x;
        this->y = y;
    }

    Point transform(const Point& v)
    {
        return Point(x+v.x, y+v.y);
    }

    float dot(const Point& v)
    {
        return x*v.x + y*v.y;
    }

    float norm()
    {
        return sqrt(x*x + y*y);
    }
    Point normalised()
    {
        return Point(x / norm(), y / norm());
    }

    friend Point dtc(const Point& p)
    {
        return Point(p.x, N - p.y);
    }

    friend Point ctd(const Point& p)
    {
        return Point(p.x, N - p.y);
    }

    friend ostream& operator <<(ostream& os, const Point& p)
    {
        return os << p.x << ' ' << p.y;
    }

    Point operator*(float len)
    {
        return Point(x*len, y*len);
    }
    
    Point operator+(const Point& p)
    {
        return Point(x+p.x, y+p.y);
    }

    bool pointInCircle(const Point& p)
    {
        if(sqrt((p.x-x)*(p.x-x) + (p.y-y)*(p.y-y)) < radius)
            return true;
        return false;
    }

    bool operator==(const Point& p)
    {
        return x == p.x and y == p.y;
    }

    // void drawPoint()
    // {
    //     Vertex v(Vector2f(ctd(*this).x, ctd(*this).y));
    //     Vertex vA[] = {v};
    //     window.draw(vA, 1, Points);
    //     cout << "hello even here" << endl;
    // }

    void drawCircle()
    {
        CircleShape circle(radius);
        circle.setPosition(Vector2f(ctd(*this).x-radius, ctd(*this).y-radius));
        window.draw(circle);
    }
};

class Segment
{
public:
    Point b, e;

    Segment(const Point& b, const Point& e) : b(b.x, b.y), e(e.x, e.y)
    {}

    bool operator ==(const Segment& p)
    {
        return b == p.b and e == p.e;
    }
};

whats wrong here:
   Line parallelLine(const Segment& segment, float offset)
    {
        return Line(segment.b + verticalVector*offset, segment.e + verticalVector*offset);
    }
no operator "+" matches these operandsC/C++(349)
Line.cpp(56, 31): operand types are: const Point + Point
Line.cpp(56, 31): function "sf::operator+(sf::Time left, sf::Time right)" does not match because argument #1 does not match parameter
Line.cpp(56, 31): function "sf::operator+(const sf::String &left, const sf::String &right)" does not match because argument #1 does not match parameter
Line.cpp(56, 31): candidate function template "sf::operator+(const sf::Vector2<T> &left, const sf::Vector2<T> &right)" failed deduction
Line.cpp(56, 31): candidate function template "sf::operator+(const sf::Vector3<T> &left, const sf::Vector3<T> &right)" failed deduction
