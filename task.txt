program.cpp
#include <SFML/Graphics.hpp>
#include <iostream>
#include <cmath>
#include "global.hpp"
#include "Line.cpp"
#include "Polygon.cpp"
#include "Render.cpp"
#include "PolygonDrawer.cpp"

using namespace std;
using namespace sf;

RenderWindow window;

int Render::num = 0;

int main()
{
    window.create(sf::VideoMode(1152, 720), "Polygon editor");
    window.display();

    Mode currentMode = DRAWING;
    cout << "jeden" << endl;
    Render render;
    cout << "dwa" << endl;
    PolygonDrawer polygonDrawer(render);

    bool polygonStarted = false;
    // Polygon *polygon;
    // Point *prevPoint;


    // render.polygons.push_back(nullptr);
    while (window.isOpen())
    {
        Event event;

        while (window.pollEvent(event))
        {
            if (event.type == Event::Closed)
                window.close();
            if (event.type == Event::MouseButtonPressed)
            {
                Point cursorPoint(ctd(Point(event.mouseButton.x, event.mouseButton.y)));

                if (currentMode == DRAWING)
                {
                    polygonDrawer.mouseClickHandler(cursorPoint);
                    // if(!polygonStarted)
                    // {
                    //     polygon = new Polygon(cursorPoint);
                    //     render.addPolygon(polygon);
                    //     polygonStarted = true;

                    //     prevPoint = new Point(cursorPoint.x, cursorPoint.y);
                    //     cout << "cordy: " << cursorPoint.x << " " << cursorPoint.y << endl;
                    // }
                    // else
                    // {
                    //     polygon->addSegment(*prevPoint, cursorPoint);
                    //     delete prevPoint;

                    //     if(polygon->start.pointInCircle(cursorPoint))
                    //     {
                    //         polygonStarted = false;
                    //         polygon->popVertex();
                    //     }
                    //     else
                    //     {
                    //         polygon->addVertex(cursorPoint);
                    //         prevPoint = new Point(cursorPoint.x, cursorPoint.y);
                    //     }
                    // }
                }
            }
        }

        if (currentMode == DRAWING)
        {
            polygonDrawer.temporarySegmentHanlder();
        }

        window.clear();

        // cout << "liczba poligonow " << render.polygons.size() << endl
        render.draw();

        window.display();
    }
}

render.cpp
#pragma once
#include <iostream>
#include <SFML/Graphics.hpp>
#include <cmath>
#include "Point.cpp"
#include "Polygon.cpp"
#include "global.hpp"
using namespace std;
using namespace sf;

class Render
{
public: 

    static int num;
    int privnum;
    vector<Polygon*> polygons;

    Render() : polygons(vector<Polygon*>()) {
        cout << "nowy render" << endl;
        privnum = num++;
    }

    void drawPoint(const Point& p)
    {
        Vertex v(Vector2f(ctd(p).x, ctd(p).y));
        Vertex vA[] = {v};
        window.draw(vA, 1, Points);
    }

    void drawSegment(const Segment& seg)
    {
        float x1 = seg.b.x;
        float y1 = seg.b.y;

        float x2 = seg.e.x;
        float y2 = seg.e.y;

        float len = sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
        float angle_rad = atan2(y1-y2, x2-x1);
        float angle_deg = angle_rad * 180 / M_PI;

        RectangleShape rect(Vector2f(len, 5));
        rect.setPosition(Vector2f(ctd(seg.b).x, ctd(seg.b).y));
        rect.rotate(angle_deg);
        rect.setFillColor(Color::Green);
        window.draw(rect);
    }
    
    void drawCircle(const Point& p)
    {
        CircleShape circle(radius);
        circle.setPosition(Vector2f(ctd(p).x-radius, ctd(p).y-radius));
        window.draw(circle);
    }

    void draw()
    {
        // cout << "rysuje" << endl;
        int i = 0;
        for(auto& polygon: polygons)
        {
            cout << "taka petla " << ++i << endl;
            for(auto& seg: polygon->segments)
            drawSegment(seg);

            for(auto& p: polygon->vertexes)
            drawCircle(p);
        }
    }

    void addPolygon(Polygon* polygon)
    {

        cout << "dodano polygon" << endl;
        cout << "privnum " << privnum << endl;

        polygons.push_back(polygon);

        cout << "liczba poligonow po dodaniu" << polygons.size() << endl;
    }
};

PolygonDrawer.cpp
#pragma once
#include <iostream>
#include <SFML/Graphics.hpp>
#include <cmath>
#include "global.hpp"
#include "Polygon.cpp"
#include "Render.cpp"

using namespace std;
using namespace sf;

class PolygonDrawer
{
public:
    bool drawingStarted = false;
    Polygon *polygon;
    Point *prevPoint;
    Render render;
    PolygonDrawer(Render &render) : render(render) {}
    void mouseClickHandler(const Point &cursorPoint)
    {
        if (!drawingStarted)
        {
            polygon = new Polygon(cursorPoint);
            render.addPolygon(polygon);
            drawingStarted = true;

            prevPoint = new Point(cursorPoint.x, cursorPoint.y);
            cout << "cordy: " << cursorPoint.x << " " << cursorPoint.y << endl;
        }
        else
        {
            polygon->addSegment(*prevPoint, cursorPoint);
            delete prevPoint;

            if (polygon->start.pointInCircle(cursorPoint))
            {
                drawingStarted = false;
                polygon->popVertex();
            }
            else
            {
                polygon->addVertex(cursorPoint);
                prevPoint = new Point(cursorPoint.x, cursorPoint.y);
            }
        }
    }

    void temporarySegmentHanlder()
    {
        if (drawingStarted)
        {
            Point cursorPoint(ctd(Point(Mouse::getPosition(window).x, Mouse::getPosition(window).y)));
            // cout << "cordy2: tutaj " << cursorPoint.x << " " << cursorPoint.y << endl;

            if (polygon->vertexes.size() > 1)
                polygon->popVertex();
            if (polygon->segments.size() > 0)
                polygon->popSegment();

            polygon->addVertex(cursorPoint);
            polygon->addSegment(*prevPoint, cursorPoint);
        }
        else
        {
            // cout << "yeahh "; // polygon->vertexes.size() <<  endl;
            if (polygon != nullptr)
            {
                // cout << polygon->vertexes.size() << " " << polygon->segments.size() << endl;
            }
            else
            {
                // cout << endl
            }    
        }
    }
};

After clicking I add polygons to the render but the render doesn't draw them